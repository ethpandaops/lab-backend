// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/lab-backend/internal/cartographoor (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_provider.go github.com/ethpandaops/lab-backend/internal/cartographoor Provider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cartographoor "github.com/ethpandaops/lab-backend/internal/cartographoor"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetActiveNetworks mocks base method.
func (m *MockProvider) GetActiveNetworks(ctx context.Context) map[string]*cartographoor.Network {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveNetworks", ctx)
	ret0, _ := ret[0].(map[string]*cartographoor.Network)
	return ret0
}

// GetActiveNetworks indicates an expected call of GetActiveNetworks.
func (mr *MockProviderMockRecorder) GetActiveNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveNetworks", reflect.TypeOf((*MockProvider)(nil).GetActiveNetworks), ctx)
}

// GetNetwork mocks base method.
func (m *MockProvider) GetNetwork(ctx context.Context, name string) (*cartographoor.Network, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, name)
	ret0, _ := ret[0].(*cartographoor.Network)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockProviderMockRecorder) GetNetwork(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockProvider)(nil).GetNetwork), ctx, name)
}

// GetNetworks mocks base method.
func (m *MockProvider) GetNetworks(ctx context.Context) map[string]*cartographoor.Network {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks", ctx)
	ret0, _ := ret[0].(map[string]*cartographoor.Network)
	return ret0
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockProviderMockRecorder) GetNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockProvider)(nil).GetNetworks), ctx)
}

// NotifyChannel mocks base method.
func (m *MockProvider) NotifyChannel() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyChannel")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// NotifyChannel indicates an expected call of NotifyChannel.
func (mr *MockProviderMockRecorder) NotifyChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyChannel", reflect.TypeOf((*MockProvider)(nil).NotifyChannel))
}

// Start mocks base method.
func (m *MockProvider) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProviderMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProvider)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockProvider) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockProviderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProvider)(nil).Stop))
}
